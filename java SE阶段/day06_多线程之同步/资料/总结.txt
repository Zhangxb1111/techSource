能够描述Java中多线程运行原理
	多线程程序是同时有多个线程同时执行。
	但是这个同时并不是真正意义上的同时。
	因为CPU在多个线程之间切换的速度非常快，所以可以看成同时。
能够使用继承类的方式创建多线程
	1. 定义类继承Thread
	2. 重写run
	3. 创建子类对象
	4. 调用start方法。
能够使用实现接口的方式创建多线程
	1. 定义类实现Runnable接口。
	2. 重写里面的run方法
	3. 创建Runnable接口的实现类对象
	4. 创建Thread对象。
	5. 调用start方法，开启线程。
能够说出实现接口方式的好处
	1. 解决类与类之间只能单继承的局限性。
	2. Runnable接口中的功能更加的纯粹，只负责关注线程要执行的任务。
	3. 解耦（降低了类与类之间的关联性）
	4. 更加方便的实现数据的共享。
能够解释安全问题的出现的原因	
	如果多个线程同时操作共享数据，就可能会引发线程安全问题。
能够使用同步代码块解决线程安全问题
	synchronized(锁对象) {
	
	}
	
	只有持有锁对象的线程才能够进入到同步代码块中。
	这样就避免了多个线程同时操作共享数据。
	
	
能够使用同步方法解决线程安全问题
	修饰符 synchronized 返回值类型 方法名(参数列表) {
        方法体 ；
    }
	
	同步方法，相当于把整个的方法体都加了同步。
能够说出线程6个状态的名称
	新建
	运行
	退出
	受阻塞
	无限等待：wait() （明天说）
	计时等待：有时间的等待 sleep(毫秒)  wait(毫秒)
	