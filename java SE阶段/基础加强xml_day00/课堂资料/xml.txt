

xml概述 

  1：HTML  超文本标记语言     预定义标签
     XML   可扩展标记语言     自定义标签

     XML 中的标签 都是自己定义的  

    html 与 xml  区别 
     1：xml自定义标签  html预定义标签
     2：xml语法严格   html不严格
     3: xml存储数据   html展示数据

  2：功能 
     A：存储数据 --- 当做配置文件使用
       标签  标签体  
       属性 
     B：网络数据交互
        
       公司   
         大公司  
	    java  c语言  其他语言

	    可以采用xml形式 存储数据 给对方交互 
	           json形式  

    
  3：XML的基本语法 
      A：后缀名是.xml
      B：XML的第一行 最上面一行 必须是文档声明
      C：XML有且只有一个根标签
      D：属性 对应的值 必须使用引号括起来
      E：标签必须正确关闭
      F：xml中的标签名 区分大小写

  4:xml的快速入门 
        <?xml version="1.0" encoding="UTF-8"?>
	<users>
	  <user>jack</user>
	  <person id="p001">tom</person>
 	</users>
  
  5：xml的文档声明
     告诉别人 这里是xml 
     <?xml ?>
     属性
        version  版本号  1.0
        encoding 编码    utf-8
     位置  必须是起始位置
     一定要写文档声明  

     <br/>

  6：元素  element
     <bean>                            </bean>
     开始标签   标签(元素)体            结束标签
	A：元素是XML文档中最重要的组成部分，
	B: 普通元素的结构开始标签、元素体、结束标签组成。例如：<hello>大家好</hello>
	C: 元素体：元素体可以是元素，也可以是文本，例如：<b><a>你好</a></b>
	D：空元素：空元素只有开始标签，而没有结束标签，但元素必须自己闭合，例如：<c/>
								  <c></c>
	元素命名：
	a)	区分大小写
	b)	不能使用空格，不能使用冒号:
	c)	不建议以XML、xml、Xml开头
	6.	格式化良好的XML文档，必须只有一个根元素。

 
  7：属性  attribute
      A：属性是元素的一部分 它必须出现在开始标签中
      B：属性的定义格式   属性名="属性的值"  ''
         属性名 要求： 不能是空格 冒号 等 特殊字符 必须以字母开头
      C：多个属性之间 空格隔开
      D：属性是0~N 但是 一个元素中不允许有同名属性

  8：注释
     <!-- 这就是注释-->
     不会被解析器 解析
     
  9：文本 
     写文本的时候  如果遇到了一些特殊字符 
       比如 < > " ' 
      会把这些当做语义解读 

      转义字符 
      
     因为记转义字符 或者使用起来太麻烦 于是出现了一个CDATA区域 
     <![CDATA[
	任意内容
     ]]>

  10：对于程序员来说 需要掌握什么呢？
      框架里面用了。
      1：能够看懂xml格式
      2：能够按照约束 写出符合规则的xml
      3: 能够简单看懂约束
      
 --------------------------------XML的约束-------------------------
  什么叫xml文档约束
     规定xml文档的书写规则 

     约束分类
       1：DTD约束        一种简单的约束技术
       2：Schema约束     一种复杂的约束技术

        规定 元素名称  子元素的名称及属性 还有出现次数 及 顺序  
 
      开发中 基本不自己写约束  

      用别人的框架  那么约束由框架的人员写好了  

      引入别人的约束 被规范  


  DTD约束  
     DTD（Document Type Definition），文档类型定义，用来约束XML文档。规定XML文档中元素的名称，子元素的名称及顺序，元素的属性等。
 
     先有约束 
      dtd约束 以 dtd结尾
      1：将bean.dtd复制到 module中 
      2: 解释一下里面的内容
         
         <!DOCTYPE beans SYSTEM "bean.dtd"> 引入约束

	 我们写的xml 需要被约束 
	 所以要引入约束 
	 在我自己的xml中 在文档声明后面 加上这句话
	 <!DOCTYPE beans SYSTEM "bean.dtd">
	        根标签名 本地   位置名称
		beans

         引入了？

     3：引入之后 呢？ 按照规范 写xml

        解释一下 (你就看一下了解)
	<!ELEMENT beans (bean*,import*) >
	约束的是 元素  元素是beans  ()组合 
	        beans中有一组 元素 
		        (bean*,import*)
			 两种标签 bean  import 
			 , 两个之间 并列关系 有所谓！
			 * 表示该元素出现0次~n次

       

       <!ATTLIST bean id CDATA #REQUIRED
                className CDATA #REQUIRED
                >
        
       约束的 是元素中的属性 被约束的元素是bean
               id 元素中的属性名   CDATA 类型是文本类型  #REQUIRED 必须出现
	       换行 代表 该元素中存在下一个属性


  Schema约束 
        Schema是新的XML文档约束；
	Schema要比DTD强大很多，是DTD 替代者；
	Schema本身也是XML文档，但Schema文档的扩展名为xsd，而不是xml。
	Schema 功能更强大，数据类型更完善
	Schema 支持名称空间

  学习一下
     1：bean-schema.xsd 复制到我们的module中 
     2：引入约束 
        复制 提示的内容
	按照提示写


  名称空间  
     

  ---------------------XML的解析----------------------------
  解析方式
      1.DOM：要求解析器把整个XML文档装载到内存，并解析成一个Document对象。
        优点 ： 每个结点关系 一目了然  可以进行增删改查 
        缺点 ： 文件过大 内存溢出  

      2.SAX 解析 是一种速度更快，更有效的方法。
         它逐行扫描文档，一边扫描一边解析。并以事件驱动的方式进行具体解析，每执行一行，都将触发对应的事件。
	 优点：快
	 缺点：只能读 

      3.PULL：Android内置的XML解析方式，类似SAX。


      我们采用的是dom  主要是 结构一目了然  

     因为实现很麻烦 需要很多逻辑 很多API   这种解析 大家都要做的  雷锋来了 

     解析器 了  

      很多公司推出了解析器
        	常见的解析开发包：
	JAXP：sun公司提供支持DOM和SAX开发包
	JDom：dom4j兄弟
	jsoup：一种处理HTML特定解析开发包
	dom4j：比较常用的解析开发包，hibernate底层采用。

     
  
     实现 解析 

       1：导包 
          两个包 

       2：使用功能  学习API 

          通过分析  解说 API  

	  首先知道我要解析谁  
	     bean.xml
 
   根据 分析原理图  写代码 
     public class Dom4JDemo {

    public static void main(String[] args) throws DocumentException {
        //解析  bean.xml文件
        //1:创建SAXReader对象 用来读取bean.xml
        SAXReader saxReader = new SAXReader();
        //2: 使用读取方法 将文件读到内存中 形成document对象
        Document document = saxReader.read("xml/bean.xml");
        //3:获取根元素
        Element rootElement = document.getRootElement();
        //4:获取根元素下 所有的 bean元素
        List<Element> beanElements =rootElement.elements();
        //5: 遍历得到每一个bean元素
        for (Element beanElement : beanElements) {
            // beanElement 每一个bean元素
            // 解析 bean元素中的 className 属性
            String className = beanElement.attributeValue("className");
            System.out.println("className:"+className);

            //6： beanElement 有 很多property元素 获取该bean元素下的所有peoperty元素
            List<Element> ppElements = beanElement.elements();
            // 7:遍历 得到每一个property元素
            for (Element ppElement : ppElements) {
                // 解析 里面的 name  value
                String name = ppElement.attributeValue("name");
                String value = ppElement.attributeValue("value");
                System.out.println(name+"   "+value);
            }
        }
    }
}

---加入反射操作 ------
  提前准备好 com.itheima.demo 下的 两个User.java Student.java类 复制到包下

  代码
   public class Dom4JRelfectDemo {

    public static void main(String[] args) throws Exception {
        //解析  bean.xml文件
        //1:创建SAXReader对象 用来读取bean.xml
        SAXReader saxReader = new SAXReader();
        //2: 使用读取方法 将文件读到内存中 形成document对象
        Document document = saxReader.read("xml/bean.xml");
        //3:获取根元素
        Element rootElement = document.getRootElement();
        //4:获取根元素下 所有的 bean元素
        List<Element> beanElements =rootElement.elements();
        //5: 遍历得到每一个bean元素
        for (Element beanElement : beanElements) {
            // beanElement 每一个bean元素
            // 解析 bean元素中的 className 属性
            String className = beanElement.attributeValue("className");
//            System.out.println("className:"+className);
            //创建一个对象  根据全路径创建
            Class clazz = Class.forName(className);

            // 快捷创建对象方式
            Object bean = clazz.newInstance();
            // 现在是一个空参形式的对象 没有设置属性的值

            //6： beanElement 有 很多property元素 获取该bean元素下的所有peoperty元素
            List<Element> ppElements = beanElement.elements();
            // 7:遍历 得到每一个property元素
            for (Element ppElement : ppElements) {
                // 解析 里面的 name  value
                String name = ppElement.attributeValue("name");
                String value = ppElement.attributeValue("value");
//                System.out.println(name+"   "+value);
                // 请将 对应的属性名 与属性值  设置到  bean对象中
                /*
                  通过 set方法 完成设置值
                    但是  反射
                      如何做
                        经过分析 发现
                           name    --- setName
                           user    --- setUser
                 */
                String methodName = "set"+name.substring(0,1).toUpperCase()+name.substring(1);
                                         // 首字母大写 +后面拼接字符串
//                System.out.println(methodName);
                // 反射得到该方法
                Method method = clazz.getMethod(methodName, String.class);

                //发射执行
                method.invoke(bean,value);
            }

            System.out.println(bean);
        }
    }
}

	      
-----------------------------------------------------
xpath 
   就是可以根据路径 解析到标签 

   XPath 使用路径表达式在 XML 文档中进行导航

     定义了一些寻找路径的规则

         
public class XpathDemo {

    public static void main(String[] args) throws Exception{
        /*
          Dom4j 结合 路径表达式(xpath)  寻找节点
         */
        SAXReader saxReader = new SAXReader();
//
        String path = XpathDemo.class.getClassLoader().getResource("student.xml").getFile();

        File file = new File(path);

        Document document = saxReader.read(file);

        ///.结合xpath语法查询
        //      查询所有student标签
        List<Node> nodes = document.selectNodes("//student");
//        nodes.forEach(System.out::println);
        for (Node node : nodes) {
            System.out.println(node);
        }
        System.out.println("----------------------------------");
        // 查询所有student标签下的name标签
        List<Node> node2s = document.selectNodes("//student/name");
        //        nodes.forEach(System.out::println);
        for (Node node : node2s) {
            System.out.println(node);
        }


        System.out.println("----------------------------------");
        //查询student标签下带有id属性的name标签
        List<Node> node3s = document.selectNodes("//student/name[@id]");
        //        nodes.forEach(System.out::println);
        for (Node node : node3s) {
            System.out.println(node);
        }

        //查询student标签下带有id属性的name标签 并且id属性值为itcast
        System.out.println("----------------------------------");
        List<Node> node4s = document.selectNodes("//student/name[@id='itcast']");
        //        nodes.forEach(System.out::println);
        for (Node node : node4s) {
            System.out.println(node);
        }
    }
}



能够说出XML的作用
    1：存储数据  2：网络交互
了解XML的组成元素	
    文档声明  标签  标签体  
       文本  属性  注释
能够说出有哪些XML约束技术
    dtd  schema 
能够说出解析XML文档DOM方式原理	
   将整个xml 读取到内存中 形成一颗DOM树 解析树

能够使用dom4j解析XML文档
     按照步骤写

能够使用xpath解析XML文档
    根据路径表达式寻找标签  

    /aa/bb/cc

    //student

    //student/abc

    //student/abc[@id]

    //student/abc[@id='s001']












     


        
     
