package cn.itcast.demo04_generic;
/*
    泛型， 就是一种不确定的数据类型。

    如果在类后面加上<T>，这个类就变成了泛型类。这个T可以使用任意的字母代替。
    <T> 表示定义了一种不确定的数据类型，这种不确定的数据类型必须在使用这个类（比如创建对象）的时候才能确定下来。

    如果希望缩小泛型的范围，延后泛型的确定时间，让泛型在调用方法的时候确定，那么我们可以使用泛型方法。

    泛型方法的定义：
        修饰符 <E>返回值类型 方法名(参数列表) {
            //....
        }
    泛型方法上的泛型，是要等到调用方法的时候才能确定到底是什么具体的类型。

    总结：
        泛型类指的是定义在类上的泛型，这种泛型需要在使用这个类的时候才能够确定
        泛型方法是在方法上定义泛型，这种泛型是需要在调用方法的时候才能够确定类型到底是什么。

 */
public class Factory<T> {//表示定义了一个不确定的类型T。

    /*
        定义方法，接收什么参数，就返回什么数据。
        <E>表示定义了不确定了数据类型E
        另外两个E表示使用这种不确定的类型E当做参数和返回值。
     */
    public <E>E getSame(E e) {
        return e;
    }

    /*
        给出方法，可以修理任何东西
     */
    public T method(T t) { //表示使用了不确定的类型T，当做参数和返回值类型。
        //修理...
        return t;
    }
    /*
    public <E> E function() {
        return null;
    }
    */

    /*
        给出一个方法，修理任何东西
     */
    /*
    public Object method(Object obj) {
        //进行修理...
        return obj;
    }
    */
    /*
        给出一个方法，修理Pad
     */
    /*
    public Pad method(Pad pad) {
        //修理...
        return pad;
    }
    */
    /*
        给出一个方法，用来修理手机
     */
    /*
    public Phone method(Phone p) {
        //修理....
        return p;
    }
    */
}
